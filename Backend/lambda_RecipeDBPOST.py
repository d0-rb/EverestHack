import boto3
import json
from decimal import Decimal

dynamo = boto3.resource('dynamodb')
infoTable = dynamo.Table('EverestHackTablesInfo')
table = dynamo.Table('EverestHackRecipes')


def default(obj):  # required when json.dumping dynamodb objects into string
    if isinstance(obj, Decimal):
        return str(obj)
    raise TypeError("Object of type '%s' is not JSON serializable" % type(obj).__name__)


def lambda_handler(event, context):  # creates recipe entry into recipes database. if id is supplied, that is used as the primary key. if not, an id is autogenerated.
    item = json.loads(event["body"])
    if "id" not in item:  # when id not passed
        idResponse = infoTable.update_item(Key={"info": "recipes"}, UpdateExpression="set curid = curid + :one",
                                           ExpressionAttributeValues={":one": Decimal(1)}, ReturnValues="UPDATED_OLD")  # get info about latest generated id to autoincrement
        id = str(idResponse["Attributes"]["curid"])  # sets id to latest autoincrement amount
        item["id"] = id
    else:
        id = item["id"]

    response = table.put_item(Item=item)
    response["id"] = id  # returns id that was set for the item, whether it be one that was passed in or one that was generated
    return {
        'statusCode': '200',
        'body': json.dumps(response),
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
    }
